// <auto-generated />
using System;
using Infrastructure.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FuYang.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210705172248_addCountToGroupRecordEntity")]
    partial class addCountToGroupRecordEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.CraftIndicatorRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ModelId")
                        .HasColumnName("model_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Rules")
                        .HasColumnName("rules")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("t_craft_indicator_rule");
                });

            modelBuilder.Entity("Core.Entities.Data", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .HasColumnName("data")
                        .HasColumnType("text");

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Remark")
                        .HasColumnName("remark")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("Result")
                        .HasColumnName("result")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<DateTime>("TestTime")
                        .HasColumnName("test_time")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Total")
                        .HasColumnName("total")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("t_data");
                });

            modelBuilder.Entity("Core.Entities.DataRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<double?>("Circle")
                        .HasColumnName("circle")
                        .HasColumnType("double");

                    b.Property<int>("Count")
                        .HasColumnName("count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .HasColumnName("data")
                        .HasColumnType("text");

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("int");

                    b.Property<double?>("Hardness")
                        .HasColumnName("hardness")
                        .HasColumnType("double");

                    b.Property<double?>("Length")
                        .HasColumnName("length")
                        .HasColumnType("double");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("Oval")
                        .HasColumnName("oval")
                        .HasColumnType("double");

                    b.Property<string>("Remark")
                        .HasColumnName("remark")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<double?>("Resistance")
                        .HasColumnName("resistance")
                        .HasColumnType("double");

                    b.Property<double?>("ResistanceOpen")
                        .HasColumnName("resistance_open")
                        .HasColumnType("double");

                    b.Property<string>("Result")
                        .HasColumnName("result")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<DateTime>("TestTime")
                        .HasColumnName("test_time")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Total")
                        .HasColumnName("total")
                        .HasColumnType("int");

                    b.Property<double?>("VentilationCigarette")
                        .HasColumnName("ventilation_cigarette")
                        .HasColumnType("double");

                    b.Property<double?>("VentilationFilter")
                        .HasColumnName("ventilation_filter")
                        .HasColumnType("double");

                    b.Property<double?>("VentilationTotal")
                        .HasColumnName("ventilation_total")
                        .HasColumnType("double");

                    b.Property<double?>("Weight")
                        .HasColumnName("weight")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("t_data_record");
                });

            modelBuilder.Entity("Core.Entities.FactoryReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int>("ChemicalDataId")
                        .HasColumnName("chemical_data_id")
                        .HasColumnType("int");

                    b.Property<string>("Count")
                        .HasColumnName("count")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("int");

                    b.Property<string>("ManufacturerPlace")
                        .HasColumnName("manufacturer_place")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderNo")
                        .HasColumnName("order_no")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<int>("ReportRet")
                        .HasColumnName("report_ret")
                        .HasColumnType("int");

                    b.Property<int>("ReportType")
                        .HasColumnName("report_type")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnName("result")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int>("SpecificationId")
                        .HasColumnName("specification_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("TestDate")
                        .HasColumnName("test_date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TestMethod")
                        .HasColumnName("test_method")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("SpecificationId");

                    b.HasIndex("UserId");

                    b.ToTable("t_factory_report");
                });

            modelBuilder.Entity("Core.Entities.Function", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FunctionName")
                        .HasColumnName("function_name")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<int>("MenuId")
                        .HasColumnName("menu_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<int>("Position")
                        .HasColumnName("position")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("t_function");
                });

            modelBuilder.Entity("Core.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("BeginTime")
                        .HasColumnName("begin_time")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeliverTime")
                        .HasColumnName("deliver_time")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Instance")
                        .HasColumnName("instance")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<int>("MachineId")
                        .HasColumnName("machine_id")
                        .HasColumnType("int");

                    b.Property<int>("MachineModelId")
                        .HasColumnName("machine_model_id")
                        .HasColumnType("int");

                    b.Property<int>("MeasureTypeId")
                        .HasColumnName("measure_type_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PickUpWay")
                        .HasColumnName("pickup_way")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProductionTime")
                        .HasColumnName("production_time")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SpecificationId")
                        .HasColumnName("specification_id")
                        .HasColumnType("int");

                    b.Property<int>("TurnId")
                        .HasColumnName("turn_id")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("MachineModelId");

                    b.HasIndex("MeasureTypeId");

                    b.HasIndex("SpecificationId");

                    b.HasIndex("TurnId");

                    b.ToTable("t_group");
                });

            modelBuilder.Entity("Core.Entities.GroupRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("BeginTime")
                        .HasColumnName("begin_time")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Count")
                        .HasColumnName("count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeliverTime")
                        .HasColumnName("deliver_time")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Instance")
                        .HasColumnName("instance")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<int>("MachineId")
                        .HasColumnName("machine_id")
                        .HasColumnType("int");

                    b.Property<int>("MachineModelId")
                        .HasColumnName("machine_model_id")
                        .HasColumnType("int");

                    b.Property<int>("MeasureTypeId")
                        .HasColumnName("measure_type_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PickUpWay")
                        .HasColumnName("pickup_way")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProductionTime")
                        .HasColumnName("production_time")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SpecificationId")
                        .HasColumnName("specification_id")
                        .HasColumnType("int");

                    b.Property<int>("TurnId")
                        .HasColumnName("turn_id")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("MachineModelId");

                    b.HasIndex("MeasureTypeId");

                    b.HasIndex("SpecificationId");

                    b.HasIndex("TurnId");

                    b.ToTable("t_group_record");
                });

            modelBuilder.Entity("Core.Entities.Indicator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IndicatorParentId")
                        .HasColumnName("indicator_parent_id")
                        .HasColumnType("int");

                    b.Property<int>("IndicatorProject")
                        .HasColumnName("indicator_project")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("Standard")
                        .HasColumnName("standard")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnName("unit")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorParentId");

                    b.ToTable("t_indicator");
                });

            modelBuilder.Entity("Core.Entities.IndicatorParent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("t_indicator_parent");
                });

            modelBuilder.Entity("Core.Entities.InspectionReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FinalRet")
                        .HasColumnName("final_ret")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("int");

                    b.Property<string>("Humidity")
                        .HasColumnName("humidity")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PhyRet")
                        .HasColumnName("phy_ret")
                        .HasColumnType("int");

                    b.Property<int>("PhyRetDeduction")
                        .HasColumnName("phy_ret_deduction")
                        .HasColumnType("int");

                    b.Property<string>("PhyRetDes")
                        .HasColumnName("phy_ret_des")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("Remark")
                        .HasColumnName("remark")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Temperature")
                        .HasColumnName("temperature")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<double>("Total")
                        .HasColumnName("total")
                        .HasColumnType("double");

                    b.Property<string>("Water")
                        .HasColumnName("water")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("t_inspection_report");
                });

            modelBuilder.Entity("Core.Entities.InspectionReportAppearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DataId")
                        .HasColumnName("data_id")
                        .HasColumnType("int");

                    b.Property<int>("Frequency")
                        .HasColumnName("frequency")
                        .HasColumnType("int");

                    b.Property<int>("IndicatorId")
                        .HasColumnName("indicator_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ReportId")
                        .HasColumnName("report_id")
                        .HasColumnType("int");

                    b.Property<int>("SubScore")
                        .HasColumnName("sub_score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorId");

                    b.ToTable("t_inspection_report_appearance");
                });

            modelBuilder.Entity("Core.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Operating")
                        .HasColumnName("operating")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("User")
                        .HasColumnName("user")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("t_log");
                });

            modelBuilder.Entity("Core.Entities.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("t_machine");
                });

            modelBuilder.Entity("Core.Entities.MachineModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ModelId")
                        .HasColumnName("model_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.Property<int>("WorkShopId")
                        .HasColumnName("work_shop_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("WorkShopId");

                    b.ToTable("t_machine_model");
                });

            modelBuilder.Entity("Core.Entities.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("t_manufacturer");
                });

            modelBuilder.Entity("Core.Entities.MaterialReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int>("Checker")
                        .HasColumnName("checker")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("int");

                    b.Property<string>("Humidity")
                        .HasColumnName("humidity")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<int>("ManufacturerId")
                        .HasColumnName("manufacturer_id")
                        .HasColumnType("int");

                    b.Property<string>("ManufacturerName")
                        .HasColumnName("manufacturer_name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderNo")
                        .HasColumnName("order_no")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("OtherDesc")
                        .HasColumnName("other_desc")
                        .HasColumnType("text");

                    b.Property<int>("ReportRet")
                        .HasColumnName("report_ret")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnName("result")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("SampleCount")
                        .HasColumnName("sample_count")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("SamplePlace")
                        .HasColumnName("sample_place")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<int>("SpecificationTypeId")
                        .HasColumnName("specification_id")
                        .HasColumnType("int");

                    b.Property<string>("Temperature")
                        .HasColumnName("temperature")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<DateTime>("TestDate")
                        .HasColumnName("test_date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Unit")
                        .HasColumnName("unit")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("Checker");

                    b.HasIndex("GroupId");

                    b.HasIndex("SpecificationTypeId");

                    b.ToTable("t_material_report");
                });

            modelBuilder.Entity("Core.Entities.MaterialTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SpecificationTypeId")
                        .HasColumnName("specification_type_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpecificationTypeId");

                    b.ToTable("t_material_template");
                });

            modelBuilder.Entity("Core.Entities.MeasureType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("t_measure_type");
                });

            modelBuilder.Entity("Core.Entities.MeasureTypeIndicators", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CvDeduction")
                        .HasColumnName("cv_deduction")
                        .HasColumnType("int");

                    b.Property<int>("CvPoints")
                        .HasColumnName("cv_points")
                        .HasColumnType("int");

                    b.Property<int>("Deduction")
                        .HasColumnName("deduction")
                        .HasColumnType("int");

                    b.Property<int>("IndicatorId")
                        .HasColumnName("indicator_id")
                        .HasColumnType("int");

                    b.Property<int>("MeanDeduction")
                        .HasColumnName("mean_deduction")
                        .HasColumnType("int");

                    b.Property<int>("MeanPoints")
                        .HasColumnName("mean_points")
                        .HasColumnType("int");

                    b.Property<int>("MeasureTypeId")
                        .HasColumnName("measure_type_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Points")
                        .HasColumnName("points")
                        .HasColumnType("int");

                    b.Property<int>("SdDeduction")
                        .HasColumnName("sd_deduction")
                        .HasColumnType("int");

                    b.Property<int>("SdPoints")
                        .HasColumnName("sd_points")
                        .HasColumnType("int");

                    b.Property<int>("SpecificationTypeId")
                        .HasColumnName("specification_type_id")
                        .HasColumnType("int");

                    b.Property<int>("UnQualifiedCount")
                        .HasColumnName("unqualified_count")
                        .HasColumnType("int");

                    b.Property<int>("UnQualifiedOperator")
                        .HasColumnName("unqualified_operator")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorId");

                    b.HasIndex("MeasureTypeId");

                    b.ToTable("t_measure_type_indicators");
                });

            modelBuilder.Entity("Core.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Icon")
                        .HasColumnName("icon")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<int>("Level")
                        .HasColumnName("level")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnName("url")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("t_menu");
                });

            modelBuilder.Entity("Core.Entities.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("t_model");
                });

            modelBuilder.Entity("Core.Entities.OperatingLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ExecutionTime")
                        .HasColumnName("execution_time")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Path")
                        .HasColumnName("path")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Request")
                        .HasColumnName("request")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("Response")
                        .HasColumnName("response")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("t_operating_log");
                });

            modelBuilder.Entity("Core.Entities.PhysicalReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FinalRet")
                        .HasColumnName("final_ret")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("int");

                    b.Property<string>("Humidity")
                        .HasColumnName("humidity")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PhyRet")
                        .HasColumnName("phy_ret")
                        .HasColumnType("int");

                    b.Property<int>("PhyRetDeduction")
                        .HasColumnName("phy_ret_deduction")
                        .HasColumnType("int");

                    b.Property<string>("PhyRetDes")
                        .HasColumnName("phy_ret_des")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("Remark")
                        .HasColumnName("remark")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Temperature")
                        .HasColumnName("temperature")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<double>("Total")
                        .HasColumnName("total")
                        .HasColumnType("double");

                    b.Property<string>("Water")
                        .HasColumnName("water")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("t_physical_report");
                });

            modelBuilder.Entity("Core.Entities.PhysicalReportAppearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Frequency")
                        .HasColumnName("frequency")
                        .HasColumnType("int");

                    b.Property<int>("IndicatorId")
                        .HasColumnName("indicator_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ReportId")
                        .HasColumnName("report_id")
                        .HasColumnType("int");

                    b.Property<int>("SubScore")
                        .HasColumnName("sub_score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorId");

                    b.HasIndex("ReportId");

                    b.ToTable("t_physical_report_appearance");
                });

            modelBuilder.Entity("Core.Entities.ProductReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FinalRet")
                        .HasColumnName("final_ret")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("int");

                    b.Property<string>("Humidity")
                        .HasColumnName("humidity")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PhyRet")
                        .HasColumnName("phy_ret")
                        .HasColumnType("int");

                    b.Property<int>("PhyRetDeduction")
                        .HasColumnName("phy_ret_deduction")
                        .HasColumnType("int");

                    b.Property<string>("PhyRetDes")
                        .HasColumnName("phy_ret_des")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("Remark")
                        .HasColumnName("remark")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Temperature")
                        .HasColumnName("temperature")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<double>("Total")
                        .HasColumnName("total")
                        .HasColumnType("double");

                    b.Property<string>("Water")
                        .HasColumnName("water")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("t_product_report");
                });

            modelBuilder.Entity("Core.Entities.ProductReportAppearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Frequency")
                        .HasColumnName("frequency")
                        .HasColumnType("int");

                    b.Property<int>("IndicatorId")
                        .HasColumnName("indicator_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ReportId")
                        .HasColumnName("report_id")
                        .HasColumnType("int");

                    b.Property<int>("SubScore")
                        .HasColumnName("sub_score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorId");

                    b.ToTable("t_product_report_appearance");
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("RoleMenu")
                        .HasColumnName("role_menu")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("t_role");
                });

            modelBuilder.Entity("Core.Entities.Specification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("CpkRules")
                        .HasColumnName("cpk_rules")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MeanRules")
                        .HasColumnName("mean_rules")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("OrderNo")
                        .HasColumnName("order_no")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Remark")
                        .HasColumnName("remark")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("SdRules")
                        .HasColumnName("sd_rules")
                        .HasColumnType("text");

                    b.Property<string>("SingleRules")
                        .HasColumnName("single_rules")
                        .HasColumnType("text");

                    b.Property<int>("SpecificationTypeId")
                        .HasColumnName("specification_type_id")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpecificationTypeId");

                    b.ToTable("t_specification");
                });

            modelBuilder.Entity("Core.Entities.SpecificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("t_specification_type");
                });

            modelBuilder.Entity("Core.Entities.SpecificationTypeRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Rules")
                        .HasColumnName("rules")
                        .HasColumnType("text");

                    b.Property<int>("SpecificationTypeId")
                        .HasColumnName("specification_type_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpecificationTypeId");

                    b.ToTable("t_specification_type_rule");
                });

            modelBuilder.Entity("Core.Entities.SystemSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int>("AdminId")
                        .HasColumnName("admin_id")
                        .HasColumnType("int");

                    b.Property<bool>("CanSeeOtherData")
                        .HasColumnName("can_see_other_data")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ChemicalTypeId")
                        .HasColumnName("chemical_type_id")
                        .HasColumnType("int");

                    b.Property<int>("Circle")
                        .HasColumnName("circle")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Hardness")
                        .HasColumnName("hardness")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnName("length")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Oval")
                        .HasColumnName("oval")
                        .HasColumnType("int");

                    b.Property<int>("PhysicalTypeId")
                        .HasColumnName("physical_type_id")
                        .HasColumnType("int");

                    b.Property<int>("Resistance")
                        .HasColumnName("resistance")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnName("weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("t_system_setting");
                });

            modelBuilder.Entity("Core.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("t_team");
                });

            modelBuilder.Entity("Core.Entities.Tow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("t_tow");
                });

            modelBuilder.Entity("Core.Entities.Turn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("t_turn");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HashedPassword")
                        .HasColumnName("hashed_password")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NickName")
                        .HasColumnName("nick_name")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("t_user");
                });

            modelBuilder.Entity("Core.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("int");

                    b.Property<string>("UserIds")
                        .HasColumnName("user_ids")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("t_user_role");
                });

            modelBuilder.Entity("Core.Entities.WaterRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<double>("After")
                        .HasColumnName("after")
                        .HasColumnType("double");

                    b.Property<double>("Before")
                        .HasColumnName("before")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DataId")
                        .HasColumnName("data_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataTestTime")
                        .HasColumnName("data_test_time")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Water")
                        .HasColumnName("water")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("t_water_record");
                });

            modelBuilder.Entity("Core.Entities.WorkShop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnName("modified_at_utc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("t_work_shop");
                });

            modelBuilder.Entity("Core.Entities.CraftIndicatorRule", b =>
                {
                    b.HasOne("Core.Entities.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Data", b =>
                {
                    b.HasOne("Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.FactoryReport", b =>
                {
                    b.HasOne("Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Specification", "Specification")
                        .WithMany()
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Function", b =>
                {
                    b.HasOne("Core.Entities.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Group", b =>
                {
                    b.HasOne("Core.Entities.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.MachineModel", "MachineModel")
                        .WithMany()
                        .HasForeignKey("MachineModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.MeasureType", "MeasureType")
                        .WithMany()
                        .HasForeignKey("MeasureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Specification", "Specification")
                        .WithMany()
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Turn", "Turn")
                        .WithMany()
                        .HasForeignKey("TurnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.GroupRecord", b =>
                {
                    b.HasOne("Core.Entities.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.MachineModel", "MachineModel")
                        .WithMany()
                        .HasForeignKey("MachineModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.MeasureType", "MeasureType")
                        .WithMany()
                        .HasForeignKey("MeasureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Specification", "Specification")
                        .WithMany()
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Turn", "Turn")
                        .WithMany()
                        .HasForeignKey("TurnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Indicator", b =>
                {
                    b.HasOne("Core.Entities.IndicatorParent", "IndicatorParent")
                        .WithMany()
                        .HasForeignKey("IndicatorParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.InspectionReport", b =>
                {
                    b.HasOne("Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.InspectionReportAppearance", b =>
                {
                    b.HasOne("Core.Entities.Indicator", "Indicator")
                        .WithMany()
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.MachineModel", b =>
                {
                    b.HasOne("Core.Entities.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.WorkShop", "WorkShop")
                        .WithMany()
                        .HasForeignKey("WorkShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.MaterialReport", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("Checker")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.SpecificationType", "SpecificationType")
                        .WithMany()
                        .HasForeignKey("SpecificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.MaterialTemplate", b =>
                {
                    b.HasOne("Core.Entities.SpecificationType", "SpecificationType")
                        .WithMany()
                        .HasForeignKey("SpecificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.MeasureTypeIndicators", b =>
                {
                    b.HasOne("Core.Entities.Indicator", "Indicator")
                        .WithMany()
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.MeasureType", "MeasureType")
                        .WithMany()
                        .HasForeignKey("MeasureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.PhysicalReport", b =>
                {
                    b.HasOne("Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.PhysicalReportAppearance", b =>
                {
                    b.HasOne("Core.Entities.Indicator", "Indicator")
                        .WithMany()
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.PhysicalReport", "PhysicalReport")
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.ProductReport", b =>
                {
                    b.HasOne("Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.ProductReportAppearance", b =>
                {
                    b.HasOne("Core.Entities.Indicator", "Indicator")
                        .WithMany()
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Specification", b =>
                {
                    b.HasOne("Core.Entities.SpecificationType", "SpecificationType")
                        .WithMany()
                        .HasForeignKey("SpecificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.SpecificationTypeRule", b =>
                {
                    b.HasOne("Core.Entities.SpecificationType", "SpecificationType")
                        .WithMany()
                        .HasForeignKey("SpecificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.UserRole", b =>
                {
                    b.HasOne("Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.WaterRecord", b =>
                {
                    b.HasOne("Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
