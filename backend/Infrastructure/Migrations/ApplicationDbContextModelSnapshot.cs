// <auto-generated />
using System;
using Infrastructure.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FuYang.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.Calibration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("description")
                        .HasComment("描述");

                    b.Property<int>("EquipmentType")
                        .HasColumnType("int")
                        .HasColumnName("equipment_type")
                        .HasComment("测试台类型");

                    b.Property<string>("Humidity")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("humidity")
                        .HasComment("湿度");

                    b.Property<string>("Instance")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("instance")
                        .HasComment("仪器名称");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Operation")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("operation")
                        .HasComment("操作");

                    b.Property<int>("ResultCode")
                        .HasColumnType("int")
                        .HasColumnName("result_code")
                        .HasComment("结果");

                    b.Property<string>("Temperature")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("temperature")
                        .HasComment("温度");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("time")
                        .HasComment("标定验证时间");

                    b.Property<string>("Unit")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("unit")
                        .HasComment("单元");

                    b.Property<string>("UnitType")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("unit_type")
                        .HasComment("单位");

                    b.HasKey("Id");

                    b.ToTable("t_calibration");
                });

            modelBuilder.Entity("Core.Entities.CraftIndicatorRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model_id");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Rules")
                        .HasColumnType("text")
                        .HasColumnName("rules");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("t_craft_indicator_rule");
                });

            modelBuilder.Entity("Core.Entities.CraftReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ControlSituation")
                        .HasColumnType("longtext")
                        .HasColumnName("control_situation");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<string>("LogOrderNo")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("log_order_no");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("OrderNo")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("order_no");

                    b.Property<string>("Remark")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("remark");

                    b.Property<int>("ReportRet")
                        .HasColumnType("int")
                        .HasColumnName("report_ret");

                    b.Property<double>("Score")
                        .HasColumnType("double")
                        .HasColumnName("score");

                    b.Property<string>("Temperature")
                        .HasColumnType("longtext")
                        .HasColumnName("temperature");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("t_craft_report");
                });

            modelBuilder.Entity("Core.Entities.Data", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Data")
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Remark")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("remark");

                    b.Property<string>("Result")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("result");

                    b.Property<DateTime>("TestTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("test_time");

                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("total");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("t_data");
                });

            modelBuilder.Entity("Core.Entities.DataRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<double?>("Circle")
                        .HasColumnType("double")
                        .HasColumnName("circle");

                    b.Property<int>("Count")
                        .HasColumnType("int")
                        .HasColumnName("count");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Data")
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<double?>("Hardness")
                        .HasColumnType("double")
                        .HasColumnName("hardness");

                    b.Property<double?>("Length")
                        .HasColumnType("double")
                        .HasColumnName("length");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<double?>("Oval")
                        .HasColumnType("double")
                        .HasColumnName("oval");

                    b.Property<string>("Remark")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("remark");

                    b.Property<double?>("Resistance")
                        .HasColumnType("double")
                        .HasColumnName("resistance");

                    b.Property<double?>("ResistanceOpen")
                        .HasColumnType("double")
                        .HasColumnName("resistance_open");

                    b.Property<string>("Result")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("result");

                    b.Property<DateTime>("TestTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("test_time");

                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("total");

                    b.Property<double?>("VentilationCigarette")
                        .HasColumnType("double")
                        .HasColumnName("ventilation_cigarette");

                    b.Property<double?>("VentilationFilter")
                        .HasColumnType("double")
                        .HasColumnName("ventilation_filter");

                    b.Property<double?>("VentilationTotal")
                        .HasColumnType("double")
                        .HasColumnName("ventilation_total");

                    b.Property<double?>("Weight")
                        .HasColumnType("double")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.ToTable("t_data_record");
                });

            modelBuilder.Entity("Core.Entities.Defect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("DefectCategory")
                        .HasColumnType("int")
                        .HasColumnName("defect_category")
                        .HasComment("缺陷分类[A, B, C, D]");

                    b.Property<string>("DefectCode")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("defect_code")
                        .HasComment("缺陷代码");

                    b.Property<int>("DefectEventsId")
                        .HasColumnType("int")
                        .HasColumnName("defect_events_id")
                        .HasComment("缺陷类别小项 Id");

                    b.Property<string>("DefectShortName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("defect_short_name")
                        .HasComment("缺陷简称");

                    b.Property<int>("DefectTypeId")
                        .HasColumnType("int")
                        .HasColumnName("defect_type_id")
                        .HasComment("缺陷类别 Id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasComment("缺陷描述");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<double>("Score")
                        .HasColumnType("double")
                        .HasColumnName("score")
                        .HasComment("扣分值");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("DefectTypeId");

                    b.ToTable("t_defect");

                    b.HasComment("缺陷表");
                });

            modelBuilder.Entity("Core.Entities.DefectEvents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("t_defect_events");

                    b.HasComment("缺陷类别小项");
                });

            modelBuilder.Entity("Core.Entities.DefectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("t_defect_type");

                    b.HasComment("缺陷类别");
                });

            modelBuilder.Entity("Core.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("t_department");

                    b.HasComment("部门");
                });

            modelBuilder.Entity("Core.Entities.FactoryReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AuditUser")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("audit_user");

                    b.Property<int>("ChemicalDataId")
                        .HasColumnType("int")
                        .HasColumnName("chemical_data_id");

                    b.Property<string>("Count")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("count");

                    b.Property<int>("CountInBox")
                        .HasColumnType("int")
                        .HasColumnName("count_in_box");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<string>("GroupIds")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("group_ids");

                    b.Property<string>("ManufacturerPlace")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("manufacturer_place");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("OrderNo")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("order_no");

                    b.Property<int>("ReportRet")
                        .HasColumnType("int")
                        .HasColumnName("report_ret");

                    b.Property<int>("ReportType")
                        .HasColumnType("int")
                        .HasColumnName("report_type");

                    b.Property<string>("Result")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("result");

                    b.Property<int>("SpecificationId")
                        .HasColumnType("int")
                        .HasColumnName("specification_id");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("test_date");

                    b.Property<string>("TestMethod")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("test_method");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("SpecificationId");

                    b.HasIndex("UserId");

                    b.ToTable("t_factory_report");
                });

            modelBuilder.Entity("Core.Entities.FactorySite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<string>("SpecificationTypes")
                        .HasColumnType("longtext")
                        .HasColumnName("specification_types");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("t_factory_site");
                });

            modelBuilder.Entity("Core.Entities.Function", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("FunctionName")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("function_name");

                    b.Property<int>("MenuId")
                        .HasColumnType("int")
                        .HasColumnName("menu_id");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<int>("Position")
                        .HasColumnType("int")
                        .HasColumnName("position");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("t_function");
                });

            modelBuilder.Entity("Core.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("BeginTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("begin_time");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime?>("DeliverTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deliver_time");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_time");

                    b.Property<string>("FromRecords")
                        .HasColumnType("text")
                        .HasColumnName("from_records");

                    b.Property<string>("Instance")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("instance");

                    b.Property<int>("MachineId")
                        .HasColumnType("int")
                        .HasColumnName("machine_id");

                    b.Property<int>("MachineModelId")
                        .HasColumnType("int")
                        .HasColumnName("machine_model_id");

                    b.Property<int>("MeasureTypeId")
                        .HasColumnType("int")
                        .HasColumnName("measure_type_id");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("OrderNo")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("order_no");

                    b.Property<int>("PickUpWay")
                        .HasColumnType("int")
                        .HasColumnName("pickup_way");

                    b.Property<DateTime?>("ProductionTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("production_time");

                    b.Property<int>("SpecificationId")
                        .HasColumnType("int")
                        .HasColumnName("specification_id");

                    b.Property<int>("TurnId")
                        .HasColumnType("int")
                        .HasColumnName("turn_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("MachineModelId");

                    b.HasIndex("MeasureTypeId");

                    b.HasIndex("SpecificationId");

                    b.HasIndex("TurnId");

                    b.ToTable("t_group");
                });

            modelBuilder.Entity("Core.Entities.GroupRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("BeginTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("begin_time");

                    b.Property<int>("Count")
                        .HasColumnType("int")
                        .HasColumnName("count");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime?>("DeliverTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deliver_time");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_time");

                    b.Property<string>("FromRecords")
                        .HasColumnType("text")
                        .HasColumnName("from_records");

                    b.Property<string>("Instance")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("instance");

                    b.Property<int>("MachineId")
                        .HasColumnType("int")
                        .HasColumnName("machine_id");

                    b.Property<int>("MachineModelId")
                        .HasColumnType("int")
                        .HasColumnName("machine_model_id");

                    b.Property<int>("MeasureTypeId")
                        .HasColumnType("int")
                        .HasColumnName("measure_type_id");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("OrderNo")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("order_no");

                    b.Property<int>("PickUpWay")
                        .HasColumnType("int")
                        .HasColumnName("pickup_way");

                    b.Property<DateTime?>("ProductionTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("production_time");

                    b.Property<int>("SpecificationId")
                        .HasColumnType("int")
                        .HasColumnName("specification_id");

                    b.Property<int>("TurnId")
                        .HasColumnType("int")
                        .HasColumnName("turn_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("MachineModelId");

                    b.HasIndex("MeasureTypeId");

                    b.HasIndex("SpecificationId");

                    b.HasIndex("TurnId");

                    b.ToTable("t_group_record");
                });

            modelBuilder.Entity("Core.Entities.Indicator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("IndicatorParentId")
                        .HasColumnType("int")
                        .HasColumnName("indicator_parent_id");

                    b.Property<int>("IndicatorProject")
                        .HasColumnType("int")
                        .HasColumnName("indicator_project");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<string>("Standard")
                        .HasColumnType("longtext")
                        .HasColumnName("standard");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Unit")
                        .HasColumnType("longtext")
                        .HasColumnName("unit");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorParentId");

                    b.ToTable("t_indicator");
                });

            modelBuilder.Entity("Core.Entities.IndicatorParent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("t_indicator_parent");
                });

            modelBuilder.Entity("Core.Entities.InspectionReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("FinalRet")
                        .HasColumnType("int")
                        .HasColumnName("final_ret");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<string>("Humidity")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("humidity");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<int>("PhyRet")
                        .HasColumnType("int")
                        .HasColumnName("phy_ret");

                    b.Property<int>("PhyRetDeduction")
                        .HasColumnType("int")
                        .HasColumnName("phy_ret_deduction");

                    b.Property<string>("PhyRetDes")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("phy_ret_des");

                    b.Property<string>("Remark")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("remark");

                    b.Property<string>("Temperature")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("temperature");

                    b.Property<double>("Total")
                        .HasColumnType("double")
                        .HasColumnName("total");

                    b.Property<string>("Water")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("water");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("t_inspection_report");
                });

            modelBuilder.Entity("Core.Entities.InspectionReportAppearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("DataId")
                        .HasColumnType("int")
                        .HasColumnName("data_id");

                    b.Property<int>("Frequency")
                        .HasColumnType("int")
                        .HasColumnName("frequency");

                    b.Property<int>("IndicatorId")
                        .HasColumnType("int")
                        .HasColumnName("indicator_id");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<int>("ReportId")
                        .HasColumnType("int")
                        .HasColumnName("report_id");

                    b.Property<int>("SubScore")
                        .HasColumnType("int")
                        .HasColumnName("sub_score");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorId");

                    b.ToTable("t_inspection_report_appearance");
                });

            modelBuilder.Entity("Core.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("description");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Operating")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("operating");

                    b.Property<string>("User")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("user");

                    b.HasKey("Id");

                    b.ToTable("t_log");
                });

            modelBuilder.Entity("Core.Entities.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("t_machine");
                });

            modelBuilder.Entity("Core.Entities.MachineModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model_id");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("WorkShopId")
                        .HasColumnType("int")
                        .HasColumnName("work_shop_id");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("WorkShopId");

                    b.ToTable("t_machine_model");
                });

            modelBuilder.Entity("Core.Entities.ManualInspectionReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Count")
                        .HasColumnType("int")
                        .HasColumnName("count")
                        .HasComment("数量");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Operation")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("operation")
                        .HasComment("操作工");

                    b.Property<int>("Result")
                        .HasColumnType("int")
                        .HasColumnName("result")
                        .HasComment("判定结果");

                    b.Property<int>("SpecificationId")
                        .HasColumnType("int")
                        .HasColumnName("specification_id")
                        .HasComment("牌号 Id");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("time")
                        .HasComment("时间");

                    b.HasKey("Id");

                    b.HasIndex("SpecificationId");

                    b.ToTable("t_manual_inspection_report");
                });

            modelBuilder.Entity("Core.Entities.ManualInspectionReportDefect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Count")
                        .HasColumnType("int")
                        .HasColumnName("count")
                        .HasComment("数量");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("DefectId")
                        .HasColumnType("int")
                        .HasColumnName("defect_id")
                        .HasComment("缺陷 Id");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<int>("ReportId")
                        .HasColumnType("int")
                        .HasColumnName("report_id")
                        .HasComment("手工检验报表 Id");

                    b.HasKey("Id");

                    b.HasIndex("DefectId");

                    b.HasIndex("ReportId");

                    b.ToTable("t_manual_inspection_report_defect");

                    b.HasComment("手工检验报表缺陷项");
                });

            modelBuilder.Entity("Core.Entities.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("t_manufacturer");
                });

            modelBuilder.Entity("Core.Entities.MaterialCheckReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id")
                        .HasComment("检测数据组数据 Id");

                    b.Property<int>("MachineId")
                        .HasColumnType("int")
                        .HasColumnName("machine_id")
                        .HasComment("机台 Id");

                    b.Property<int>("MeasureTypeId")
                        .HasColumnType("int")
                        .HasColumnName("measure_type_id")
                        .HasComment("测量类型 Id");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("OperatingUser")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("operating_user")
                        .HasComment("检验员");

                    b.Property<string>("Originator")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("originator")
                        .HasComment("发起人");

                    b.Property<int>("Qualified")
                        .HasColumnType("int")
                        .HasColumnName("qualified")
                        .HasComment("合格状态");

                    b.Property<int>("SpecificationId")
                        .HasColumnType("int")
                        .HasColumnName("specification_id")
                        .HasComment("牌号 Id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status")
                        .HasComment("流程状态");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id")
                        .HasComment("班组 Id");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("test_date")
                        .HasComment("检测日期");

                    b.Property<int>("TurnId")
                        .HasColumnType("int")
                        .HasColumnName("turn_id")
                        .HasComment("班次 Id");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("MeasureTypeId");

                    b.HasIndex("SpecificationId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TurnId");

                    b.ToTable("t_material_check_report");

                    b.HasComment("物资申检报表");
                });

            modelBuilder.Entity("Core.Entities.MaterialReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Checker")
                        .HasColumnType("int")
                        .HasColumnName("checker");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<string>("Humidity")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("humidity");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int")
                        .HasColumnName("manufacturer_id");

                    b.Property<string>("ManufacturerName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("manufacturer_name");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("OrderNo")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("order_no");

                    b.Property<string>("OtherDesc")
                        .HasColumnType("text")
                        .HasColumnName("other_desc");

                    b.Property<int>("ReportRet")
                        .HasColumnType("int")
                        .HasColumnName("report_ret");

                    b.Property<string>("Result")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("result");

                    b.Property<string>("SampleCount")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("sample_count");

                    b.Property<string>("SamplePlace")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("sample_place");

                    b.Property<int>("SpecificationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("specification_id");

                    b.Property<string>("Temperature")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("temperature");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("test_date");

                    b.Property<string>("Unit")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("unit");

                    b.HasKey("Id");

                    b.HasIndex("Checker");

                    b.HasIndex("GroupId");

                    b.HasIndex("SpecificationTypeId");

                    b.ToTable("t_material_report");
                });

            modelBuilder.Entity("Core.Entities.MaterialTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<int>("SpecificationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("specification_type_id");

                    b.HasKey("Id");

                    b.HasIndex("SpecificationTypeId");

                    b.ToTable("t_material_template");
                });

            modelBuilder.Entity("Core.Entities.MeasureType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("t_measure_type");
                });

            modelBuilder.Entity("Core.Entities.MeasureTypeIndicators", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("CvDeduction")
                        .HasColumnType("int")
                        .HasColumnName("cv_deduction");

                    b.Property<int>("CvPoints")
                        .HasColumnType("int")
                        .HasColumnName("cv_points");

                    b.Property<int>("Deduction")
                        .HasColumnType("int")
                        .HasColumnName("deduction");

                    b.Property<int>("IndicatorId")
                        .HasColumnType("int")
                        .HasColumnName("indicator_id");

                    b.Property<int>("MeanDeduction")
                        .HasColumnType("int")
                        .HasColumnName("mean_deduction");

                    b.Property<int>("MeanPoints")
                        .HasColumnType("int")
                        .HasColumnName("mean_points");

                    b.Property<int>("MeasureTypeId")
                        .HasColumnType("int")
                        .HasColumnName("measure_type_id");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.Property<int>("SdDeduction")
                        .HasColumnType("int")
                        .HasColumnName("sd_deduction");

                    b.Property<int>("SdPoints")
                        .HasColumnType("int")
                        .HasColumnName("sd_points");

                    b.Property<int>("SpecificationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("specification_type_id");

                    b.Property<int>("UnQualifiedCount")
                        .HasColumnType("int")
                        .HasColumnName("unqualified_count");

                    b.Property<int>("UnQualifiedOperator")
                        .HasColumnType("int")
                        .HasColumnName("unqualified_operator");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorId");

                    b.HasIndex("MeasureTypeId");

                    b.ToTable("t_measure_type_indicators");
                });

            modelBuilder.Entity("Core.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Icon")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("icon");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("level");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Url")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("t_menu");
                });

            modelBuilder.Entity("Core.Entities.Method", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<string>("SpecificationTypes")
                        .HasColumnType("longtext")
                        .HasColumnName("specification_types");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("t_method");
                });

            modelBuilder.Entity("Core.Entities.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("t_model");
                });

            modelBuilder.Entity("Core.Entities.MonthCraftReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("PartName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("part_name");

                    b.Property<string>("Result")
                        .HasColumnType("longtext")
                        .HasColumnName("result");

                    b.Property<double>("Score")
                        .HasColumnType("double")
                        .HasColumnName("score");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("time");

                    b.Property<string>("User")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("user");

                    b.HasKey("Id");

                    b.ToTable("t_month_craft_report");
                });

            modelBuilder.Entity("Core.Entities.OperatingLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Description")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("description");

                    b.Property<string>("ExecutionTime")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("execution_time");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Path")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("path");

                    b.Property<string>("Request")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("request");

                    b.Property<string>("Response")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("response");

                    b.Property<string>("UserName")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.ToTable("t_operating_log");
                });

            modelBuilder.Entity("Core.Entities.PackagingMachine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("t_packaging_machine");

                    b.HasComment("包装机");
                });

            modelBuilder.Entity("Core.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ButtonPosition")
                        .HasColumnType("int")
                        .HasColumnName("button_position")
                        .HasComment("按钮位置[1 顶部, 2 行内]");

                    b.Property<int>("ButtonType")
                        .HasColumnType("int")
                        .HasColumnName("button_type")
                        .HasComment("按钮类型");

                    b.Property<string>("Component")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("component")
                        .HasComment("组件路径");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("FunctionName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("function_name")
                        .HasComment("按钮方法名称");

                    b.Property<string>("Icon")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("icon")
                        .HasComment("图标");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("level")
                        .HasComment("菜单层级");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name")
                        .HasComment("权限名称");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order")
                        .HasComment("序号");

                    b.Property<string>("Path")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("path")
                        .HasComment("菜单路径");

                    b.Property<int>("PermissionType")
                        .HasColumnType("int")
                        .HasColumnName("permission_type")
                        .HasComment("权限类型[1 菜单, 2 按钮]");

                    b.Property<int>("Root")
                        .HasColumnType("int")
                        .HasColumnName("root")
                        .HasComment("菜单 Id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status")
                        .HasComment("状态");

                    b.HasKey("Id");

                    b.ToTable("t_permission");
                });

            modelBuilder.Entity("Core.Entities.PhysicalReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("FinalRet")
                        .HasColumnType("int")
                        .HasColumnName("final_ret");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<string>("Humidity")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("humidity");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<int>("PhyRet")
                        .HasColumnType("int")
                        .HasColumnName("phy_ret");

                    b.Property<int>("PhyRetDeduction")
                        .HasColumnType("int")
                        .HasColumnName("phy_ret_deduction");

                    b.Property<string>("PhyRetDes")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("phy_ret_des");

                    b.Property<string>("Remark")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("remark");

                    b.Property<string>("Temperature")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("temperature");

                    b.Property<double>("Total")
                        .HasColumnType("double")
                        .HasColumnName("total");

                    b.Property<string>("Water")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("water");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("t_physical_report");
                });

            modelBuilder.Entity("Core.Entities.PhysicalReportAppearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("Frequency")
                        .HasColumnType("int")
                        .HasColumnName("frequency");

                    b.Property<int>("IndicatorId")
                        .HasColumnType("int")
                        .HasColumnName("indicator_id");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<int>("ReportId")
                        .HasColumnType("int")
                        .HasColumnName("report_id");

                    b.Property<int>("SubScore")
                        .HasColumnType("int")
                        .HasColumnName("sub_score");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorId");

                    b.HasIndex("ReportId");

                    b.ToTable("t_physical_report_appearance");
                });

            modelBuilder.Entity("Core.Entities.ProcessDisciplineReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id")
                        .HasComment("涉及部门");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasComment("现象描述");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Punishment")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("punishment")
                        .HasComment("处罚情况");

                    b.Property<string>("Reward")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("reward")
                        .HasComment("奖励情况");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("time")
                        .HasComment("检测时间");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("t_process_discipline_report");

                    b.HasComment("工艺纪律执行情况");
                });

            modelBuilder.Entity("Core.Entities.ProductReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("FinalRet")
                        .HasColumnType("int")
                        .HasColumnName("final_ret");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<string>("Humidity")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("humidity");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<int>("PhyRet")
                        .HasColumnType("int")
                        .HasColumnName("phy_ret");

                    b.Property<int>("PhyRetDeduction")
                        .HasColumnType("int")
                        .HasColumnName("phy_ret_deduction");

                    b.Property<string>("PhyRetDes")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("phy_ret_des");

                    b.Property<string>("Remark")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("remark");

                    b.Property<string>("Temperature")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("temperature");

                    b.Property<double>("Total")
                        .HasColumnType("double")
                        .HasColumnName("total");

                    b.Property<string>("Water")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("water");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("t_product_report");
                });

            modelBuilder.Entity("Core.Entities.ProductReportAppearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("Frequency")
                        .HasColumnType("int")
                        .HasColumnName("frequency");

                    b.Property<int>("IndicatorId")
                        .HasColumnType("int")
                        .HasColumnName("indicator_id");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<int>("ReportId")
                        .HasColumnType("int")
                        .HasColumnName("report_id");

                    b.Property<int>("SubScore")
                        .HasColumnType("int")
                        .HasColumnName("sub_score");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorId");

                    b.ToTable("t_product_report_appearance");
                });

            modelBuilder.Entity("Core.Entities.ReportOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("t_report_order");
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("CanSeeOtherData")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_see_other_data");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<string>("RoleMenu")
                        .HasColumnType("text")
                        .HasColumnName("role_menu");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("t_role");
                });

            modelBuilder.Entity("Core.Entities.Specification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CpkRules")
                        .HasColumnType("text")
                        .HasColumnName("cpk_rules");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CvRules")
                        .HasColumnType("text")
                        .HasColumnName("cv_rules");

                    b.Property<string>("MeanRules")
                        .HasColumnType("text")
                        .HasColumnName("mean_rules");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<string>("OrderNo")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("order_no");

                    b.Property<string>("Remark")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("remark");

                    b.Property<string>("SdRules")
                        .HasColumnType("text")
                        .HasColumnName("sd_rules");

                    b.Property<string>("SingleRules")
                        .HasColumnType("text")
                        .HasColumnName("single_rules");

                    b.Property<int>("SpecificationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("specification_type_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("SpecificationTypeId");

                    b.ToTable("t_specification");
                });

            modelBuilder.Entity("Core.Entities.SpecificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CraftOrderNo")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("craft_order_no");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("FactoryOrderNo")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("factory_order_no");

                    b.Property<string>("InspectionOrderNo")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("inspection_order_no");

                    b.Property<string>("MaterialOrderNo")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("material_order_no");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<string>("PhysicalOrderNo")
                        .HasColumnType("longtext")
                        .HasColumnName("physical_order_no");

                    b.Property<string>("ProductOrderNo")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("product_order_no");

                    b.Property<string>("Remark")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("remark");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("t_specification_type");
                });

            modelBuilder.Entity("Core.Entities.SpecificationTypeRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Rules")
                        .HasColumnType("text")
                        .HasColumnName("rules");

                    b.Property<int>("SpecificationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("specification_type_id");

                    b.HasKey("Id");

                    b.HasIndex("SpecificationTypeId");

                    b.ToTable("t_specification_type_rule");
                });

            modelBuilder.Entity("Core.Entities.SystemSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    b.Property<int>("BoxMakingWorkShopId")
                        .HasColumnType("int")
                        .HasColumnName("box_making_work_shop_id");

                    b.Property<bool>("CanSeeOtherData")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_see_other_data");

                    b.Property<int>("ChemicalTypeId")
                        .HasColumnType("int")
                        .HasColumnName("chemical_type_id");

                    b.Property<int>("Circle")
                        .HasColumnType("int")
                        .HasColumnName("circle");

                    b.Property<int>("CraftTypeId")
                        .HasColumnType("int")
                        .HasColumnName("craft_type_id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("FactoryTypeId")
                        .HasColumnType("int")
                        .HasColumnName("factory_type_id");

                    b.Property<int>("FilterTypeId")
                        .HasColumnType("int")
                        .HasColumnName("filter_type_id");

                    b.Property<int>("Hardness")
                        .HasColumnType("int")
                        .HasColumnName("hardness");

                    b.Property<int>("InspectionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("inspection_type_id");

                    b.Property<int>("Length")
                        .HasColumnType("int")
                        .HasColumnName("length");

                    b.Property<int>("MaterialTypeId")
                        .HasColumnType("int")
                        .HasColumnName("material_type_id");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("MySqlServerName")
                        .HasColumnType("longtext")
                        .HasColumnName("mysql_server_name");

                    b.Property<int>("Oval")
                        .HasColumnType("int")
                        .HasColumnName("oval");

                    b.Property<int>("PhysicalTypeId")
                        .HasColumnType("int")
                        .HasColumnName("physical_type_id");

                    b.Property<int>("ProductionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("production_type_id");

                    b.Property<string>("RecycleBoxTypeId")
                        .HasColumnType("longtext")
                        .HasColumnName("recycle_box_type_id");

                    b.Property<int>("Resistance")
                        .HasColumnType("int")
                        .HasColumnName("resistance");

                    b.Property<int>("Weight")
                        .HasColumnType("int")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.ToTable("t_system_setting");
                });

            modelBuilder.Entity("Core.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("t_team");
                });

            modelBuilder.Entity("Core.Entities.TestReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("FinalRet")
                        .HasColumnType("int")
                        .HasColumnName("final_ret");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<string>("Humidity")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("humidity");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<int>("PhyRet")
                        .HasColumnType("int")
                        .HasColumnName("phy_ret");

                    b.Property<int>("PhyRetDeduction")
                        .HasColumnType("int")
                        .HasColumnName("phy_ret_deduction");

                    b.Property<string>("PhyRetDes")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("phy_ret_des");

                    b.Property<string>("Remark")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("remark");

                    b.Property<string>("Temperature")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("temperature");

                    b.Property<double>("Total")
                        .HasColumnType("double")
                        .HasColumnName("total");

                    b.Property<string>("Water")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("water");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("t_test_report");
                });

            modelBuilder.Entity("Core.Entities.TestReportAppearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("Frequency")
                        .HasColumnType("int")
                        .HasColumnName("frequency");

                    b.Property<int>("IndicatorId")
                        .HasColumnType("int")
                        .HasColumnName("indicator_id");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<int>("ReportId")
                        .HasColumnType("int")
                        .HasColumnName("report_id");

                    b.Property<int>("SubScore")
                        .HasColumnType("int")
                        .HasColumnName("sub_score");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorId");

                    b.ToTable("t_test_report_appearance");
                });

            modelBuilder.Entity("Core.Entities.Tow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("t_tow");
                });

            modelBuilder.Entity("Core.Entities.Turn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("t_turn");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("HashedPassword")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("hashed_password");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("NickName")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("nick_name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("UserName")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.ToTable("t_user");
                });

            modelBuilder.Entity("Core.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("UserIds")
                        .HasColumnType("text")
                        .HasColumnName("user_ids");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("t_user_role");
                });

            modelBuilder.Entity("Core.Entities.VolumePickUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("t_volume_pick_up");

                    b.HasComment("卷接机");
                });

            modelBuilder.Entity("Core.Entities.WaterRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<double>("After")
                        .HasColumnType("double")
                        .HasColumnName("after");

                    b.Property<double>("Before")
                        .HasColumnType("double")
                        .HasColumnName("before");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("DataId")
                        .HasColumnType("int")
                        .HasColumnName("data_id");

                    b.Property<DateTime>("DataTestTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_test_time");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<double>("Water")
                        .HasColumnType("double")
                        .HasColumnName("water");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("t_water_record");
                });

            modelBuilder.Entity("Core.Entities.WorkShop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("t_work_shop");
                });

            modelBuilder.Entity("Core.Entities.WorkShopQualityPointRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("InspectionAllPercent")
                        .HasColumnType("int")
                        .HasColumnName("inspection_all_percent");

                    b.Property<int>("InspectionPointsPercent")
                        .HasColumnType("int")
                        .HasColumnName("inspection_points_percent");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<int>("PhysicalAllPercent")
                        .HasColumnType("int")
                        .HasColumnName("physical_all_percent");

                    b.Property<int>("PhysicalPointsPercent")
                        .HasColumnType("int")
                        .HasColumnName("physical_points_percent");

                    b.Property<int>("ProductAllPercent")
                        .HasColumnType("int")
                        .HasColumnName("product_all_percent");

                    b.Property<int>("ProductPointsPercent")
                        .HasColumnType("int")
                        .HasColumnName("product_points_percent");

                    b.Property<int>("SpecificationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("specification_type_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("WorkShopId")
                        .HasColumnType("int")
                        .HasColumnName("work_shop_id");

                    b.HasKey("Id");

                    b.HasIndex("SpecificationTypeId");

                    b.HasIndex("WorkShopId");

                    b.ToTable("t_work_shop_quality_point_rule");
                });

            modelBuilder.Entity("Core.Entities.WrapQualityInspectionReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("BatchUnqualified")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("batch_unqualified")
                        .HasComment("批不合格项");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("InspectionCount")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("inspection_count")
                        .HasComment("专检次数");

                    b.Property<string>("Inspector")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("inspector")
                        .HasComment("检验员");

                    b.Property<string>("MeasureGroupIds")
                        .HasColumnType("text")
                        .HasColumnName("measure_group_ids")
                        .HasComment("测量组数据 Id");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("OrderNo")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("order_no")
                        .HasComment("烟丝批号");

                    b.Property<int>("PackagingMachineId")
                        .HasColumnType("int")
                        .HasColumnName("packaging_machine_id")
                        .HasComment("包装机 Id");

                    b.Property<string>("PackagingMachineOperator")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("packaging_machine_operator")
                        .HasComment("包装机操作工");

                    b.Property<double>("PackagingMachinePoints")
                        .HasColumnType("double")
                        .HasColumnName("packaging_machine_points")
                        .HasComment("包装机扣分");

                    b.Property<string>("Remark")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("remark")
                        .HasComment("备注");

                    b.Property<int>("Result")
                        .HasColumnType("int")
                        .HasColumnName("result")
                        .HasComment("质量等级");

                    b.Property<int>("SpecificationId")
                        .HasColumnType("int")
                        .HasColumnName("specification_id")
                        .HasComment("牌号 Id");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id")
                        .HasComment("班组 Id");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("time")
                        .HasComment("时间");

                    b.Property<double>("TotalPoints")
                        .HasColumnType("double")
                        .HasColumnName("total_points")
                        .HasComment("总扣分");

                    b.Property<int>("TurnId")
                        .HasColumnType("int")
                        .HasColumnName("turn_id")
                        .HasComment("班次 Id");

                    b.Property<int>("VolumePickUpId")
                        .HasColumnType("int")
                        .HasColumnName("volume_pick_up_id")
                        .HasComment("卷接机 Id");

                    b.Property<string>("VolumePickUpOperator")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("volume_pick_up_operator")
                        .HasComment("卷接机操作工");

                    b.Property<double>("VolumePickUpPoints")
                        .HasColumnType("double")
                        .HasColumnName("volume_pick_up_points")
                        .HasComment("卷接机扣分");

                    b.HasKey("Id");

                    b.HasIndex("PackagingMachineId");

                    b.HasIndex("SpecificationId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TurnId");

                    b.HasIndex("VolumePickUpId");

                    b.ToTable("t_wrap_quality_inspection_report");

                    b.HasComment("卷包质量检验报表");
                });

            modelBuilder.Entity("Core.Entities.WrapQualityInspectionReportDefect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Count")
                        .HasColumnType("int")
                        .HasColumnName("count")
                        .HasComment("数量");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("DefectId")
                        .HasColumnType("int")
                        .HasColumnName("defect_id")
                        .HasComment("缺陷 Id");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at_utc");

                    b.Property<int>("ReportId")
                        .HasColumnType("int")
                        .HasColumnName("report_id")
                        .HasComment("卷包质量检验报表 Id");

                    b.HasKey("Id");

                    b.HasIndex("DefectId");

                    b.HasIndex("ReportId");

                    b.ToTable("t_wrap_quality_inspection_report_defect");
                });

            modelBuilder.Entity("Core.Entities.CraftIndicatorRule", b =>
                {
                    b.HasOne("Core.Entities.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Core.Entities.CraftReport", b =>
                {
                    b.HasOne("Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Core.Entities.Data", b =>
                {
                    b.HasOne("Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Core.Entities.Defect", b =>
                {
                    b.HasOne("Core.Entities.DefectType", "DefectType")
                        .WithMany()
                        .HasForeignKey("DefectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefectType");
                });

            modelBuilder.Entity("Core.Entities.FactoryReport", b =>
                {
                    b.HasOne("Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Specification", "Specification")
                        .WithMany()
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Specification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Function", b =>
                {
                    b.HasOne("Core.Entities.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Core.Entities.Group", b =>
                {
                    b.HasOne("Core.Entities.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.MachineModel", "MachineModel")
                        .WithMany()
                        .HasForeignKey("MachineModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.MeasureType", "MeasureType")
                        .WithMany()
                        .HasForeignKey("MeasureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Specification", "Specification")
                        .WithMany()
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Turn", "Turn")
                        .WithMany()
                        .HasForeignKey("TurnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("MachineModel");

                    b.Navigation("MeasureType");

                    b.Navigation("Specification");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("Core.Entities.GroupRecord", b =>
                {
                    b.HasOne("Core.Entities.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.MachineModel", "MachineModel")
                        .WithMany()
                        .HasForeignKey("MachineModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.MeasureType", "MeasureType")
                        .WithMany()
                        .HasForeignKey("MeasureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Specification", "Specification")
                        .WithMany()
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Turn", "Turn")
                        .WithMany()
                        .HasForeignKey("TurnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("MachineModel");

                    b.Navigation("MeasureType");

                    b.Navigation("Specification");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("Core.Entities.Indicator", b =>
                {
                    b.HasOne("Core.Entities.IndicatorParent", "IndicatorParent")
                        .WithMany()
                        .HasForeignKey("IndicatorParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IndicatorParent");
                });

            modelBuilder.Entity("Core.Entities.InspectionReport", b =>
                {
                    b.HasOne("Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Core.Entities.InspectionReportAppearance", b =>
                {
                    b.HasOne("Core.Entities.Indicator", "Indicator")
                        .WithMany()
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Indicator");
                });

            modelBuilder.Entity("Core.Entities.MachineModel", b =>
                {
                    b.HasOne("Core.Entities.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.WorkShop", "WorkShop")
                        .WithMany()
                        .HasForeignKey("WorkShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("WorkShop");
                });

            modelBuilder.Entity("Core.Entities.ManualInspectionReport", b =>
                {
                    b.HasOne("Core.Entities.Specification", "Specification")
                        .WithMany()
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("Core.Entities.ManualInspectionReportDefect", b =>
                {
                    b.HasOne("Core.Entities.Defect", "Defect")
                        .WithMany()
                        .HasForeignKey("DefectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.ManualInspectionReport", "ManualInspectionReport")
                        .WithMany("Defects")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Defect");

                    b.Navigation("ManualInspectionReport");
                });

            modelBuilder.Entity("Core.Entities.MaterialCheckReport", b =>
                {
                    b.HasOne("Core.Entities.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.MeasureType", "MeasureType")
                        .WithMany()
                        .HasForeignKey("MeasureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Specification", "Specification")
                        .WithMany()
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Turn", "Turn")
                        .WithMany()
                        .HasForeignKey("TurnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("MeasureType");

                    b.Navigation("Specification");

                    b.Navigation("Team");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("Core.Entities.MaterialReport", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("Checker")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.SpecificationType", "SpecificationType")
                        .WithMany()
                        .HasForeignKey("SpecificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("SpecificationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.MaterialTemplate", b =>
                {
                    b.HasOne("Core.Entities.SpecificationType", "SpecificationType")
                        .WithMany()
                        .HasForeignKey("SpecificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpecificationType");
                });

            modelBuilder.Entity("Core.Entities.MeasureTypeIndicators", b =>
                {
                    b.HasOne("Core.Entities.Indicator", "Indicator")
                        .WithMany()
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.MeasureType", "MeasureType")
                        .WithMany()
                        .HasForeignKey("MeasureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Indicator");

                    b.Navigation("MeasureType");
                });

            modelBuilder.Entity("Core.Entities.PhysicalReport", b =>
                {
                    b.HasOne("Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Core.Entities.PhysicalReportAppearance", b =>
                {
                    b.HasOne("Core.Entities.Indicator", "Indicator")
                        .WithMany()
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.PhysicalReport", "PhysicalReport")
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Indicator");

                    b.Navigation("PhysicalReport");
                });

            modelBuilder.Entity("Core.Entities.ProcessDisciplineReport", b =>
                {
                    b.HasOne("Core.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Core.Entities.ProductReport", b =>
                {
                    b.HasOne("Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Core.Entities.ProductReportAppearance", b =>
                {
                    b.HasOne("Core.Entities.Indicator", "Indicator")
                        .WithMany()
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Indicator");
                });

            modelBuilder.Entity("Core.Entities.Specification", b =>
                {
                    b.HasOne("Core.Entities.SpecificationType", "SpecificationType")
                        .WithMany()
                        .HasForeignKey("SpecificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpecificationType");
                });

            modelBuilder.Entity("Core.Entities.SpecificationTypeRule", b =>
                {
                    b.HasOne("Core.Entities.SpecificationType", "SpecificationType")
                        .WithMany()
                        .HasForeignKey("SpecificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpecificationType");
                });

            modelBuilder.Entity("Core.Entities.TestReport", b =>
                {
                    b.HasOne("Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Core.Entities.TestReportAppearance", b =>
                {
                    b.HasOne("Core.Entities.Indicator", "Indicator")
                        .WithMany()
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Indicator");
                });

            modelBuilder.Entity("Core.Entities.UserRole", b =>
                {
                    b.HasOne("Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Core.Entities.WaterRecord", b =>
                {
                    b.HasOne("Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Core.Entities.WorkShopQualityPointRule", b =>
                {
                    b.HasOne("Core.Entities.SpecificationType", "SpecificationType")
                        .WithMany()
                        .HasForeignKey("SpecificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.WorkShop", "WorkShop")
                        .WithMany()
                        .HasForeignKey("WorkShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpecificationType");

                    b.Navigation("WorkShop");
                });

            modelBuilder.Entity("Core.Entities.WrapQualityInspectionReport", b =>
                {
                    b.HasOne("Core.Entities.PackagingMachine", "PackagingMachine")
                        .WithMany()
                        .HasForeignKey("PackagingMachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Specification", "Specification")
                        .WithMany()
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Turn", "Turn")
                        .WithMany()
                        .HasForeignKey("TurnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.VolumePickUp", "VolumePickUp")
                        .WithMany()
                        .HasForeignKey("VolumePickUpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PackagingMachine");

                    b.Navigation("Specification");

                    b.Navigation("Team");

                    b.Navigation("Turn");

                    b.Navigation("VolumePickUp");
                });

            modelBuilder.Entity("Core.Entities.WrapQualityInspectionReportDefect", b =>
                {
                    b.HasOne("Core.Entities.Defect", "Defect")
                        .WithMany()
                        .HasForeignKey("DefectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.WrapQualityInspectionReport", "WrapQualityInspectionReport")
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Defect");

                    b.Navigation("WrapQualityInspectionReport");
                });

            modelBuilder.Entity("Core.Entities.ManualInspectionReport", b =>
                {
                    b.Navigation("Defects");
                });
#pragma warning restore 612, 618
        }
    }
}
